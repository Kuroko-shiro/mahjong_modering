# 麻雀リーグトラッカー v2.0 - Python依存関係
# 本番環境とセキュリティを考慮した完全版

# ===============================================
# コア Web フレームワーク
# ===============================================

# Flask - 軽量 Web フレームワーク
Flask>=2.3.0,<3.0.0
Werkzeug>=2.3.0,<3.0.0

# Jinja2 - テンプレートエンジン（Flaskに同梱されているが明示的に指定）
Jinja2>=3.1.0,<4.0.0

# MarkupSafe - HTML/XMLエスケープ（Jinja2の依存関係）
MarkupSafe>=2.1.0,<3.0.0

# Click - コマンドラインインターフェース（Flaskの依存関係）
click>=8.1.0,<9.0.0

# itsdangerous - セキュリティ用途の署名（Flaskの依存関係）
itsdangerous>=2.1.0,<3.0.0

# ===============================================
# WSGI サーバー（本番環境用）
# ===============================================

# Gunicorn - Python WSGI HTTPサーバー
gunicorn>=21.0.0,<22.0.0

# eventlet - 非同期ネットワーキング（オプション）
eventlet>=0.33.0,<1.0.0

# gevent - 協調的マルチタスキング（オプション）
gevent>=23.7.0,<24.0.0

# ===============================================
# データベース関連
# ===============================================

# SQLite3は Python標準ライブラリに含まれているため不要
# しかし、追加の SQLite ユーティリティが必要な場合：
# sqlite-utils>=3.35.0,<4.0.0

# ===============================================
# HTTP クライアント・ユーティリティ
# ===============================================

# requests - HTTP ライブラリ
requests>=2.31.0,<3.0.0

# urllib3 - HTTP クライアント（requestsの依存関係）
urllib3>=2.0.0,<3.0.0

# certifi - CA証明書バンドル
certifi>=2023.7.22

# ===============================================
# 日付・時刻処理
# ===============================================

# python-dateutil - 日付解析ユーティリティ
python-dateutil>=2.8.0,<3.0.0

# pytz - タイムゾーンライブラリ
pytz>=2023.3

# ===============================================
# JSON・データ処理
# ===============================================

# 標準のjsonライブラリで十分ですが、より高速な処理が必要な場合：
# ujson>=5.8.0,<6.0.0

# ===============================================
# セキュリティ・認証
# ===============================================

# bcrypt - パスワードハッシュ化（将来のユーザー認証機能用）
bcrypt>=4.0.0,<5.0.0

# cryptography - 暗号化ライブラリ
cryptography>=41.0.0,<42.0.0

# PyJWT - JSON Web Token（API認証用、将来の拡張用）
PyJWT>=2.8.0,<3.0.0

# ===============================================
# 開発・デバッグ用依存関係
# ===============================================

# watchdog - ファイル変更監視（開発用ホットリロード）
watchdog>=3.0.0,<4.0.0

# Flask-DebugToolbar - デバッグツールバー（開発環境用）
Flask-DebugToolbar>=0.13.1,<1.0.0

# ===============================================
# コード品質・フォーマット
# ===============================================

# black - コードフォーマッター
black>=23.7.0,<24.0.0

# flake8 - コードリンター
flake8>=6.0.0,<7.0.0

# isort - import文ソート
isort>=5.12.0,<6.0.0

# mypy - 型チェッカー
mypy>=1.5.0,<2.0.0

# pylint - 包括的コード解析
pylint>=2.17.0,<3.0.0

# ===============================================
# テスト関連
# ===============================================

# pytest - テストフレームワーク
pytest>=7.4.0,<8.0.0

# pytest-flask - Flask用pytestプラグイン
pytest-flask>=1.2.0,<2.0.0

# pytest-cov - テストカバレッジ
pytest-cov>=4.1.0,<5.0.0

# coverage - コードカバレッジ測定
coverage>=7.2.0,<8.0.0

# ===============================================
# ログ・モニタリング
# ===============================================

# structlog - 構造化ログ
structlog>=23.1.0,<24.0.0

# colorama - クロスプラットフォーム色付きターミナル出力
colorama>=0.4.6,<1.0.0

# ===============================================
# 設定管理
# ===============================================

# python-dotenv - .envファイル読み込み
python-dotenv>=1.0.0,<2.0.0

# pydantic - データ検証とシリアライゼーション
pydantic>=2.2.0,<3.0.0

# ===============================================
# パフォーマンス・最適化
# ===============================================

# cachetools - キャッシュユーティリティ
cachetools>=5.3.0,<6.0.0

# redis - Redis クライアント（将来のキャッシュ機能用）
redis>=4.6.0,<5.0.0

# ===============================================
# API・シリアライゼーション
# ===============================================

# marshmallow - オブジェクトシリアライゼーション
marshmallow>=3.20.0,<4.0.0

# Flask-CORS - Cross-Origin Resource Sharing
Flask-CORS>=4.0.0,<5.0.0

# ===============================================
# バックアップ・エクスポート
# ===============================================

# openpyxl - Excel ファイル読み書き
openpyxl>=3.1.0,<4.0.0

# pandas - データ分析ライブラリ（統計エクスポート用、オプション）
pandas>=2.0.0,<3.0.0

# ===============================================
# システム・OS関連
# ===============================================

# psutil - システム情報取得
psutil>=5.9.0,<6.0.0

# pathlib2 - パス操作（Python 3.8+では標準ライブラリpathlib使用）
# pathlib2>=2.3.7,<3.0.0  # Python 3.8+では不要

# ===============================================
# 本番環境デプロイ用
# ===============================================

# supervisor - プロセス管理（Linux本番環境用、オプション）
# supervisor>=4.2.0,<5.0.0

# systemd-python - systemd連携（Linux用、オプション）
# systemd-python>=235,<236

# ===============================================
# 開発用パッケージ管理
# ===============================================

# pip-tools - 依存関係管理
pip-tools>=7.1.0,<8.0.0

# wheel - Python wheel パッケージ
wheel>=0.41.0,<1.0.0

# setuptools - パッケージング
setuptools>=68.0.0,<69.0.0

# ===============================================
# 国際化・ローカライゼーション（将来の多言語対応用）
# ===============================================

# Babel - 国際化ユーティリティ
Babel>=2.12.0,<3.0.0

# Flask-Babel - Flask用国際化
Flask-Babel>=4.0.0,<5.0.0

# ===============================================
# 環境固有の依存関係
# ===============================================

# Windows用
pywin32>=306; sys_platform == "win32"

# macOS用
pyobjc-core>=9.2; sys_platform == "darwin"

# Linux用（オプション）
# python-systemd>=235; sys_platform == "linux"

# ===============================================
# 注意事項とコメント
# ===============================================

# 1. バージョン固定について:
#    - セキュリティアップデートを受け取るため、マイナーバージョンは固定せず範囲指定
#    - メジャーバージョンアップは破壊的変更の可能性があるため固定
#
# 2. オプション依存関係:
#    - 一部の依存関係はオプションです（コメントアウト済み）
#    - 必要に応じてコメントを外してインストール
#
# 3. 仮想環境の推奨:
#    - pip install -r requirements.txt の前に仮想環境を作成推奨
#    - python -m venv venv && source venv/bin/activate
#
# 4. セキュリティアップデート:
#    - 定期的に pip list --outdated でアップデートをチェック
#    - pip install --upgrade package_name でアップデート
#
# 5. 本番環境での注意:
#    - --no-cache-dir オプション使用でキャッシュ無効化
#    - requirements-prod.txt として分離も検討
#
# 6. 依存関係のロック:
#    - pip freeze > requirements-lock.txt で完全版固定
#    - pip-tools の pip-compile 使用も推奨